clc;
clear all;
%% 1. Simulation Parameters
N_bits=10000
SNR_range=[4:4:60]

%% 2. GENERATE signal
signal=randint(1,N_bits,[0,1]);

%% 3.a. GENERATE ASK-OOK
OOK=signal;

%% 3.b. GENERATE PSK-PRK
PRK = 2*signal-1;

%% 3.c. GENERATE FSK-orthogonal FSK
FSK =signal;
for i=1:length(signal)
   if (signal(i)==0)
       FSK(i)=1;
   else 
       FSK(i)=1j;
   end
end


%% Filling SNR list in range from 0 to 60 dB with 4 dB steps
SNR= [];
for i=SNR_range
    SNR=[SNR i];    
end

%% 4. Adding noise to OOK:
Rx_sequenceOOK=[];
Ps_OOK=mean(abs(OOK).^2);
for j=1:length(SNR)
    noiseOOK=(sqrt(Ps_OOK/(10.^(SNR(j)/10))))*(1/sqrt(2))*(randn(1,length(OOK)));
    Rx_sequenceOOK=[Rx_sequenceOOK OOK+noiseOOK];
end

%% 5. Demodulating OOK
for k=1:length(Rx_sequenceOOK)
    if (Rx_sequenceOOK(k)>0.5)
        Rx_sequenceOOK(k)=1;
    else
        Rx_sequenceOOK(k)=0;
    end
end

%% 6. Calculating no. of errors + 7. Calculating BER + 8. plotting SNR vs BER for OOK
BER_OOK=[];
for x=0:length(SNR)-1
    START=(x*N_bits)+1;
    END=(x+1)*N_bits;
    Rx_SEQ_OOK=Rx_sequenceOOK(1,START:END);
    noOfError_OOK=biterr(signal,Rx_SEQ_OOK);
    BER_OOK=[BER_OOK noOfError_OOK/length(signal)];
end

semilogy(SNR,BER_OOK,'r-o');
hold on;

%% 4. Adding noise to PRK:
Rx_sequencePRK=[];
Ps_PRK=mean(abs(PRK).^2);
for n=1:length(SNR)
    noisePRK=(sqrt(Ps_PRK/(10.^(SNR(n)/10))))*(1/sqrt(2))*(randn(1,length(PRK)));
    Rx_sequencePRK=[Rx_sequencePRK PRK+noisePRK];
end

%% 5. Demodulating PRK
for m=1:length(Rx_sequencePRK)
    if (Rx_sequencePRK(m)>0)
        Rx_sequencePRK(m)=1;
    else
        Rx_sequencePRK(m)=0;
    end
end

%% 6. Calculating no. of errors + 7. Calculating BER + 8. plotting SNR vs BER for PRK
BER_PRK=[];
for y=0:length(SNR)-1
    START=(y*N_bits)+1;
    END=(y+1)*N_bits;
    Rx_SEQ_PRK=Rx_sequencePRK(1,START:END);
    noOfError_PRK=biterr(signal,Rx_SEQ_PRK);
    BER_PRK=[BER_PRK noOfError_PRK/length(signal)];
end

semilogy(SNR,BER_PRK,'b-x');
hold off;

%% 4. Adding noise to FSK:
Ps_FSK=mean(abs(FSK).^2);
Rx_sequenceFSK=[];

for s=1:length(SNR)
    noiseFSK=(sqrt(Ps_FSK/(10.^(SNR(s)/10))))*(1/sqrt(2))*(randn(1,length(FSK))+1j*randn(1,length(FSK)));
    Rx_sequenceFSK=[Rx_sequenceFSK FSK+noiseFSK];
end

%% 5. Demodulating FSK
syms n real
for w=1:length(Rx_sequenceFSK)
    REAL=real(Rx_sequenceFSK(w));
    IMG=imag(Rx_sequenceFSK(w));
    
    if REAL>IMG
        Rx_sequenceFSK(w)=0;
    else
        Rx_sequenceFSK(w)=1;
    end
end

%% 6. Calculating no. of errors + 7. Calculating BER + 8. plotting SNR vs BER for FSK
BER_FSK=[];
for z=0:length(SNR)-1
    START=(z*N_bits)+1;
    END=(z+1)*N_bits;
    Rx_SEQ_FSK=Rx_sequenceFSK(1,START:END);
    noOfError_FSK=biterr(signal,Rx_SEQ_FSK);
    BER_FSK=[BER_FSK noOfError_FSK/length(signal)];
end

hold on;
semilogy(SNR,BER_FSK,'k-s');
legend({'OOK','PRK','FSK'})
title('Modulation types using coding - SNR vs BER')
xlabel('SNR')
ylabel('BER')
grid on;
hold off;
